---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
    imagePath: string;
    altText: string;
}

const { imagePath, altText } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.{jpeg,jpg,png,gif,webp}");
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist en glob: "src/assets/*.{jpeg,jpg,png,gif,webp}"`);

const uniqueId = crypto.randomUUID();
---

<div class="w-60 h-80 bg-[#1F2937] p-3 flex flex-col gap-1 rounded-2xl" data-id={uniqueId}>
    <Image id={`dynamic-image-${uniqueId}`} src={images[imagePath]()} alt={altText} loading="lazy" class="dynamic-image h-48 bg-white w-full rounded-xl mx-auto" />
    <div class="flex flex-col gap-4">
        <slot />
        <button id={`save-image-${uniqueId}`} class="save-image hover:bg-[#3B82F6] text-gray-50 bg-[#1850b9] py-2 rounded-md">Comprar</button>
    </div>
</div>

<script>
    interface SavedItem {
        imagePath: string;
        price: string;
    }

    document.addEventListener("DOMContentLoaded", () => {
        const cards = document.querySelectorAll("[data-id]");

        cards.forEach((card) => {
            const uniqueId = card.getAttribute("data-id");
            const saveImageButton = document.querySelector<HTMLButtonElement>(`#save-image-${uniqueId}`);
            const dynamicImage = document.querySelector<HTMLImageElement>(`#dynamic-image-${uniqueId}`);

            // Busca el <select> y el <span>
            const priceSelect = card.querySelector("select");
            const priceSpan = card.querySelector("span.price"); // Selecciona el span que contega la clase price

            if (saveImageButton && dynamicImage) {
                saveImageButton.addEventListener("click", () => {
                    const imagePath = dynamicImage.getAttribute("src");

                    // Verifica si hay un <select> o <span> y obtiene el valor
                    let price: string | undefined;
                    if (priceSelect) {
                        price = priceSelect.value; // Obtiene el valor del <select>
                        console.log("Precio obtenido del select:", price);
                    } else if (priceSpan) {
                        price = priceSpan.textContent?.trim(); // Obtiene el contenido del <span>
                        console.log("Precio obtenido del span:", price);
                    } else {
                        console.error("No se encontró el select ni el span para obtener el precio.");
                    }

                    if (imagePath && price) {
                        let savedItems: SavedItem[] = JSON.parse(localStorage.getItem("savedItems") || "[]");

                        const item: SavedItem = {
                            imagePath,
                            price,
                        };

                        if (!savedItems.find((i: SavedItem) => i.imagePath === imagePath)) {
                            savedItems.push(item);
                        }

                        localStorage.setItem("savedItems", JSON.stringify(savedItems));
                    } else {
                        console.error("No se pudo obtener la ruta de la imagen o el precio.");
                    }
                });
            } else {
                console.error("No se pudo encontrar la imagen, el botón o el precio correspondiente.");
            }
        });
    });
</script>
