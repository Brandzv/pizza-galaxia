---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
    imagePath: string;
    altText: string;
}

const { imagePath, altText } = Astro.props;

// Importar imágenes dinámicas de la carpeta "src/assets"
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.{jpeg,jpg,png,gif,webp}");
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist en glob: "src/assets/*.{jpeg,jpg,png,gif,webp}"`);
---

<div class="w-60 h-80 bg-[#1F2937] p-3 flex flex-col gap-1 rounded-2xl">
    <Image src={images[imagePath]()} alt={altText} loading="lazy" class="dynamic-image h-48 bg-white w-full rounded-xl mx-auto" />
    <div class="flex flex-col gap-4">
        <slot />
        <button class="hover:bg-[#3B82F6] text-gray-50 bg-[#1850b9] py-2 rounded-md">Comprar</button>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Seleccionar todas las imágenes con la clase 'dynamic-image'
        const imageElements = document.querySelectorAll(".dynamic-image");

        // Crear un observador de intersección
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    // Si la imagen está en la pantalla, cargarla con "eager"
                    entry.target.setAttribute("loading", "eager");
                } else {
                    // Si no está en la pantalla, mantener "lazy"
                    entry.target.setAttribute("loading", "lazy");
                }
            });
        });

        // Observar cada imagen
        imageElements.forEach((image) => {
            observer.observe(image);
        });
    });
</script>
